{"version":3,"sources":["actions/index.js","components/UserForm.js","components/MsgList.js","components/DetailView.js","components/useModal.js","components/ClearButton.js","components/App.js","reducers/index.js","index.js"],"names":["axios","defaults","baseURL","getIm","dispatch","type","get","then","res","msg","data","catch","err","console","log","error","UserForm","useDispatch","value","useSelector","state","useState","newName","setNewName","newC","setNewC","newD","setNewD","handle_Submit","e","preventDefault","newMsg","addedMsg","name","content","date","post","response","postMessageSuccess","onSubmit","id","onChange","target","input_name1","handleUser","handle_User","timestamp","Math","floor","Date","now","input_name2","handleMsg","handle_Msg","MsgList","displayMessage","setDisplayMessage","useEffect","timeout","setTimeout","enableMessage","clearTimeout","listItems","messages","stateOfRequest","requestStatus","msgsToRender","map","i","key","className","onClick","getActiveMessageID","getDeleteId","isPending","color","height","width","isFailure","message","DetailView","activeMsgID","msgList","useModal","isShowing","setIsShowing","toggle","hide","show","handle_Button","delete","App","initialState","isSuccess","serverResponse","initialForm","v1","v2","combineReducers","action","filter","m","f","Object","assign","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9952a41.chunk.js","sourcesContent":["import axios from 'axios';\r\naxios.defaults.baseURL = 'http://localhost:9000'; //TODO: hardcode this into the heroku app domain?\r\n\r\n\r\n\r\n//TODO: if time permitted extract action strings into a constant.js with action object\r\nexport const handleUser = (input_name1, value) => {\r\n  //add could be called payload or anything used in action\r\n  return {\r\n    type: \"HANDLE_USER\",\r\n    input_name1,\r\n    value\r\n  };\r\n}\r\n\r\nexport const handleMsg = (input_name2, value) => {\r\n  return {\r\n    type: \"HANDLE_MSG\",\r\n    input_name2,\r\n    value\r\n  };\r\n}\r\n\r\nexport const handleSubmit = (newMsg) => {\r\n  return {\r\n    type: \"HANDLE_SUBMIT\",\r\n    newMsg\r\n  }\r\n}\r\n\r\nexport const initializeName = (name) => {\r\n  return {\r\n    type: \"INITIALIZE_NAME\",\r\n    name \r\n  }\r\n}\r\n\r\nexport const initializeMsg = (msg) => {\r\n  return {\r\n    type: \"INITIALIZE_MSG\",\r\n    msg \r\n  }\r\n}\r\n\r\nexport const getActiveMsg = (id) => {\r\n  return {\r\n    type: \"GET_ACTIVE_MSG\",\r\n    id\r\n  };\r\n}\r\n\r\nexport const getDelete = (id) => {\r\n  return {\r\n    type: \"GET_DELETE\",\r\n    id\r\n  };\r\n}\r\n\r\nexport const getImPending = () =>{\r\n  return {\r\n    type: \"GET_IM_PENDING\",\r\n  };\r\n}\r\nexport const getImSucess = (msg) => {\r\n  return {\r\n    type: \"GET_IM_SUCESS\",\r\n    msg\r\n  };\r\n}\r\nexport const getImFailure = (error) =>{\r\n   //error : { error }\r\n  return {\r\n    type:\"GET_IM_FAILURE\",\r\n    error\r\n  };\r\n}\r\n\r\nexport const postMessagePending = () => {\r\n  return {\r\n    type: \"POST_MESSAGE_PENDING\"\r\n  }\r\n}\r\n\r\nexport const postMessageSuccess = (response, newMsg) => {\r\n  return {\r\n    type: \"POST_MESSAGE_SUCCESS\",\r\n    response,\r\n    newMsg \r\n  }\r\n}\r\n\r\nexport const postMessageFailure = (error) => {\r\n  return {\r\n    type: \"POST_MESSAGE_FAILURE\",\r\n    error \r\n  }\r\n}\r\n\r\nexport const deleteAllPending = () => {\r\n  return {\r\n    type: \"DELETE_ALL_PENDING\"\r\n  }\r\n} \r\n\r\nexport const deleteAllSuccess = (response) => {\r\n  return {\r\n    type: \"DELETE_ALL_SUCCESS\",\r\n    response\r\n  }\r\n} \r\n\r\nexport const deleteAllFailure = (error) => {\r\n  return {\r\n    type: \"DELETE_ALL_FAILURE\",\r\n    error\r\n  }\r\n}\r\n\r\n/*API CALL ACTIONS*/\r\n\r\n\r\n//Get initial message\r\nexport const getIm = () => {\r\n  return dispatch => {\r\n    dispatch(getImPending());\r\n\r\n    axios\r\n      .get('/messages') \r\n            .then(res => {\r\n              dispatch(getImSucess(res.data.data));   \r\n            })\r\n            .catch( err => {\r\n                console.log(\"Im error:\", err);\r\n                dispatch(getImFailure(err));\r\n            } \r\n            )\r\n    \r\n  }\r\n}\r\n\r\nexport const postMessage = (newMsg) => {\r\n  return dispatch => {\r\n    dispatch(postMessagePending());\r\n\r\n    axios\r\n      .post('/add', newMsg)\r\n      .then(res => {\r\n        dispatch(postMessageSuccess(res.data.data, newMsg)); \r\n        dispatch(getIm());\r\n      })\r\n      .catch (err => {\r\n        dispatch(postMessageFailure(err));\r\n      })\r\n  }\r\n}\r\n\r\nexport const deleteAll = () => {\r\n  return dispatch => {\r\n    dispatch(deleteAllPending());\r\n\r\n    axios\r\n      .delete('/')\r\n      .then (res => {\r\n        dispatch(deleteAllSuccess(res.data));\r\n      })\r\n      .catch (err => {\r\n        dispatch(deleteAllFailure(err));\r\n      })\r\n  }\r\n}\r\n","import React, {useState} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux'; //connect used in old version\r\nimport { handleUser, handleMsg, postMessage} from '../actions';\r\n\r\n\r\nexport default function UserForm () {\r\n    //useDispatch is a function from react-redux that returns the function to dispatch 'actions' to 'reducers'\r\n    //works similarily to mapDispatchToProps\r\n    const dispatch = useDispatch();\r\n\r\n    //useSelector is a function from react-redux that returns the part of the global state you want (or the gobal state but this should never be done)\r\n    //remember global state struction structure currently looks like this:\r\n    //state: {\r\n    //  value    \r\n    //} \r\n    const value = useSelector(state => state.value);\r\n\r\n    const [newName, setNewName] = useState ();\r\n    const [newC, setNewC] = useState ();\r\n    const [newD, setNewD] = useState ();\r\n\r\n\r\n\r\n    //callback function to dispatch the handleChange 'action' to our 'reducers'\r\n    //todo: memoize with useCallback ??\r\n    const handle_User = (e) => {\r\n        setNewName(e.target.value); //sets the new filled out states for newMsg to be added\r\n        dispatch(handleUser(e.target.name, e.target.value));\r\n     }\r\n\r\n    const handle_Msg = (e) => {\r\n        setNewC(e.target.value); //sets the new filled out states for newMsg to be added\r\n        const timestamp = Math.floor (Date.now() /1000); //converts to unix timestamp\r\n        \r\n        //read the value in render function; after react updated DOM\r\n        setNewD(timestamp);\r\n        console.log(\"date inside handleMsg:\", timestamp);\r\n        dispatch(handleMsg(e.target.name, e.target.value));\r\n        \r\n    }\r\n\r\n    \r\n    //TODO: implement handleSubmit AND CONNECT WITH ACTION AND SUCH; \r\n    //REMEMBER TO PREVENT DEFAULT\r\n    const handle_Submit = (e) =>  {\r\n        \r\n        //function: added new Msg\r\n        e.preventDefault();\r\n\r\n        //empty default state (undefined) msg\r\n        const addedMsg = {\r\n            name: newName,\r\n            content: newC,\r\n            date: newD\r\n        }\r\n        \r\n\r\n       \r\n        if (addedMsg.name && addedMsg.content && addedMsg.date){\r\n            console.log(\"inside adding new message!\", addedMsg)\r\n            dispatch(postMessage(addedMsg)); //api call\r\n            \r\n           \r\n\r\n            setNewC(''); //clear the fields so new message can be written\r\n            setNewD(null); //clear the fields so new date can be added\r\n        \r\n        //dispatch(handleSubmit(addedMsg)); //old implementation\r\n\r\n    \r\n        } \r\n        \r\n            \r\n       \r\n        \r\n    }\r\n     \r\n       //maybe replace submit button to general button component type\r\n       \r\n\r\n       return(<form onSubmit= {(e) => handle_Submit(e)}>\r\n        <label>\r\n            Username:\r\n            <input id =\"name\" type=\"text\" value={value} onChange={(e) => handle_User(e)}/>\r\n        </label>\r\n        <label>\r\n            Enter Your Message:\r\n            <input id=\"msg\" type=\"text\" value={value} onChange={(e) => handle_Msg(e)}/>\r\n        </label>\r\n            <input type=\"submit\" value=\"Submit\"></input> \r\n    </form>\r\n       );\r\n\r\n}\r\n","//TODO EVERYTHING; template\r\nimport React, {Fragment, useEffect, setTimeOut, useState} from 'react';\r\nimport {useSelector, useDispatch } from 'react-redux';\r\nimport { getActiveMsg, getDelete, getIm} from '../actions';\r\nimport Loader from 'react-loader-spinner'\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\n\r\nexport default function MsgList (){\r\n\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const [displayMessage, setDisplayMessage] = useState(false);\r\n\r\n    //fetching from API endpoint\r\n    //empty dependency array ensures API is only called once\r\n    //useEffect for side effect; same as componentdidmount\r\n    useEffect(()=>{\r\n\r\n        //TODO: maybe do setTimer here to delay message load to show off spinner? Or potentially do it in Backend Fetch\r\n        dispatch(getIm());\r\n    \r\n    }, []); \r\n\r\n    useEffect(()=>{\r\n        //console.log(displayMessage);\r\n        const timeout = setTimeout(enableMessage(),10000);//10 seconds;; TODO: not working: currently doesn't wait to set displayMessage to true        \r\n        return () => clearTimeout(timeout); \r\n    }, []); \r\n   \r\n\r\n\r\n    const enableMessage = () => {\r\n        //console.log(displayMessage);\r\n        setDisplayMessage(true); //toggle boolean to cause delay for message; avoid loading flicker: currently not working\r\n    }\r\n    \r\n\r\n    //console.log(displayMessage);\r\n\r\n    const listItems = useSelector(state => state.messages.messages); //first messages is the messageReducer; .messages gives the array part of messages\r\n    const stateOfRequest = useSelector(state => state.messages.requestStatus);\r\n    \r\n\r\n    const getActiveMessageID = (i) => {\r\n        dispatch(getActiveMsg(i));\r\n    }\r\n\r\n    const getDeleteId = (i) => {\r\n        dispatch(getDelete(i));\r\n    }\r\n   \r\n\r\n    //TODO: Add more with dates field of messages\r\n    let msgsToRender = []; \r\n        if(listItems){\r\n             msgsToRender =    \r\n        listItems.map((msg, i) => {\r\n        //iterate  and get the hook's default isShowing and toggle for each message\r\n        \r\n        \r\n       \r\n        return (\r\n            <Fragment key= {i}> \r\n                {\r\n                        <li className=\"msg_send\" onClick = {() =>getActiveMessageID(i)}>\r\n                        <div className=\"msg\">\r\n                        <div className =\"msg_content\">\r\n                            <button onClick= {()=>getDeleteId(i)}>X</button>\r\n                <div className=\"msg_username\">{msg.name}</div>\r\n                <div className=\"msg_message\">{msg.content}</div>\r\n                        </div>\r\n                        </div>\r\n                    </li>   \r\n                }\r\n            </Fragment>\r\n        )\r\n        })\r\n    }\r\n       \r\n    \r\n   \r\n    \r\n    \r\n     //TODO: SET UP CONDITIONS FOR LOADING, SUCCESS AND FAILURE TO DECIDE WHAT TO DISPLAY\r\n     //loads messages if state is not pending/loading\r\n    //might need to test/debug failure condition\r\n     return( \r\n   \r\n   \r\n    <ul className= \"msg_list\"> \r\n           \r\n            {stateOfRequest.isPending & displayMessage\r\n            \r\n            ? \r\n         \r\n              <div> \r\n              <Loader \r\n              type =\"BallTriangle\"\r\n              color= \"#00BFFF\"\r\n              height={100}\r\n              width={100}\r\n              timeout = {10000} \r\n            />\r\n            </div> \r\n            : \r\n\r\n            msgsToRender    \r\n            \r\n            }\r\n            {stateOfRequest.isFailure ? <div>Error! {stateOfRequest.error.message}</div> : null }\r\n    </ul> \r\n    );\r\n\r\n}\r\n","import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n//import MsgList from './MsgList';\r\nimport { useSelector } from 'react-redux';\r\n//import useModal from './useModal';\r\n\r\n//citing:https://upmostly.com/tutorials/modal-components-react-custom-hooks\r\n//A stateless functional component that takes two props and only returns HTML when isShowing is true.\r\n// Portals allow React components to render in another part of the DOM that is outside of their parent component.\r\n//we can use a Portal to mount our Modal component to the end of the document.body element\r\n\r\n\r\n// **modal component doesn’t actually handle it’s own state.** It's parent does\r\n\r\n//2 arguments for the createPortal function: \r\n        //1)the modal component we want to render \r\n        //2)the location of where we want to append the component.\r\n\r\n\r\n\r\nexport default function DetailView (){\r\n    //const hide = useModal.hide;\r\n\r\n    const activeMsgID = useSelector(state => state.id);\r\n    const msgList = useSelector(state =>state.messages.messages);\r\n    let name = \"N/A\";\r\n    let content  = \"N/A\";\r\n    let date = \"N/A\";\r\n    \r\n    //console.log(\"activeMsgID:\", activeMsgID);\r\n    \r\n    \r\n    if (activeMsgID || activeMsgID === 0){\r\n        //console.log(\"insideActiveMsg\");\r\n        \r\n        name = msgList[activeMsgID].name;\r\n        content = msgList[activeMsgID].content;\r\n        date = msgList[activeMsgID].date;\r\n    }\r\n\r\n    return (\r\n        \r\n        <div id= \"detailedView\" className='popup'>\r\n            <div className=\"popup_inner\">\r\n                <h1>Detailed View </h1>\r\n            <p>message index is: {activeMsgID} <br/><br/>\r\n            username: {name}<br/><br/>\r\n            content: {content}<br/><br/>\r\n            date: {date} <br/><br/>\r\n            </p>\r\n            \r\n            </div>\r\n            \r\n\r\n        </div>   \r\n    );\r\n}\r\n\r\n\r\n\r\n    \r\n","import { useState } from 'react';\r\n\r\nconst useModal = () => {\r\n  const [isShowing, setIsShowing] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setIsShowing(!isShowing);\r\n  }\r\n\r\n  const hide = () => {\r\n    setIsShowing(false);\r\n  }\r\n  const show = () => {\r\n    setIsShowing(true);\r\n  }\r\n  \r\n\r\n  return {\r\n    isShowing,\r\n    toggle,\r\n    hide, \r\n    show\r\n  }\r\n};\r\n\r\nexport default useModal;\r\n","import React, {useState} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux'; //connect used in old version\r\nimport {deleteAll} from '../actions';\r\n\r\n\r\nexport default function UserForm () {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    //callback for handling clearing \r\n    const handle_Button = (e) => {\r\n            dispatch(deleteAll()); \r\n    }\r\n\r\n    return (\r\n        <button id = \"clear\" onClick = {(e) => handle_Button(e)}>\r\n            CLEAR ALL.\r\n        </button>\r\n    );\r\n}","import React /*, {useState} */ from 'react';\r\nimport UserForm from './UserForm';\r\nimport MsgList from './MsgList';\r\nimport '../App.css';\r\nimport DetailView from './DetailView';\r\nimport useModal from './useModal';\r\nimport ClearButton from './ClearButton'\r\nimport Loader from 'react-loader-spinner'\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\n\r\n\r\n\r\n\r\nfunction App () {   //this is how you make a functional component\r\n    const {isShowing, toggle} = useModal();\r\n\r\n    return (\r\n      \r\n     <div className= \"body\" > \r\n       <header>Stygian Home</header>\r\n      <section className=\"container\">\r\n        <div id=\"all_messages\">\r\n          <MsgList /> \r\n          <button className=\"detail_button\" onClick={() => toggle()}>Show Details</button>   \r\n          <ClearButton/>\r\n        </div>\r\n        <div id=\"form\">\r\n        {isShowing ? \r\n        <div>\r\n           <button id =\"close_button\" onClick={() => toggle()}>X</button>\r\n          <DetailView />\r\n        </div>\r\n        \r\n        : null\r\n        }\r\n        <UserForm/>\r\n      </div>\r\n        \r\n      </section>\r\n      </div>\r\n     \r\n      \r\n    );\r\n  }\r\n\r\n\r\nexport default App;\r\n","import {combineReducers } from 'redux';\r\n\r\n//**initial state constants**\r\n\r\n//**TODO**: comment this out/readjust to be empty object; have get request handle grabbing initial data\r\nconst initialState = {\r\n\r\n  requestStatus: {\r\n    isPending: false,\r\n    isSuccess: false,\r\n    isFailure: false,\r\n    error: null\r\n  },\r\n \r\n  messages: [],\r\n  serverResponse: null //TODO: figure out if this field is necessary\r\n\r\n}\r\n \r\nconst initialForm = {\r\n  v1: \"\",\r\n  v2: \"\"\r\n}\r\n\r\n\r\n\r\n\r\n//**Reducers** TODO: Might need to combine messageReducer into formReducer\r\n\r\nconst messageReducer = (messages = initialState, action) => {\r\n   //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\r\n   switch (action.type)\r\n   {\r\n     \r\n    /*  case \"HANDLE_SUBMIT\":\r\n       //adds the submitted message to the existing im\r\n      return {\r\n        //concat newMsg to array of messages;\r\n        //TODO: messages.message may be changed due to structure change \r\n        ...messages, //should be grabbing the 3 booleans\r\n        messages: [...messages.messages, action.newMsg], //spread attribute : ...\r\n      }\r\n */\r\n     case \"GET_DELETE\":\r\n       return {\r\n        ...messages, \r\n         messages: messages.messages.filter((m, i) => i!== action.id),\r\n       }\r\n      case \"GET_IM_PENDING\":\r\n         //mark state as \"loading\" so it can show spinner or something\r\n         //reset all errors\r\n        return {\r\n          ...messages, //spread operator: same as object.assign but cleaner\r\n          requestStatus : {\r\n            isPending: true,\r\n            isSuccess: false,\r\n            isFailure: false,\r\n            error: null,\r\n          },\r\n\r\n        };\r\n       \r\n      case \"GET_IM_SUCESS\":\r\n          //Todo: API fetch call to grab initial messages\r\n          //All done: set pending to false\r\n          //replace items with ones returned from server\r\n        return {\r\n          ...messages,\r\n          requestStatus : {\r\n            isPending: false,\r\n            isSuccess: true,\r\n            isFailure: false,\r\n            error: null,\r\n          },\r\n          messages: action.msg\r\n\r\n        }; \r\n      case \"GET_IM_FAILURE\":\r\n         //failed but is done\r\n         //save the error so we can display it somewhere\r\n         //since it failed:\r\n        \r\n        return {\r\n          ...messages,\r\n          requestStatus : {\r\n            isPending: false,\r\n            isSuccess: false,\r\n            isFailure: true,\r\n            error: action.error,\r\n          },\r\n          messages: []\r\n            //tentative: no messages displayed-> can also keep them around!\r\n            //edit later\r\n        }; \r\n      case \"POST_MESSAGE_PENDING\":\r\n         //started to send new message via form\r\n        return {\r\n          ...messages,\r\n          requestStatus:{\r\n          isPending: true,\r\n          isSuccess: false,\r\n          isFailure: false,\r\n          error: null,\r\n          },\r\n          serverResponse: {} //clear old response if any\r\n        };\r\n      case \"POST_MESSAGE_SUCCESS\":\r\n        //successfully sent post request\r\n        return {\r\n          ...messages,\r\n          requestStatus:{\r\n            isPending: false,\r\n            isSuccess: true,\r\n            isFailure: false,\r\n            error: null,\r\n          } ,\r\n          /*messages: [...messages.messages, action.newMsg ],  */\r\n          \r\n          //not sure if the message should be modified here but without it have to manually refresh to see changes\r\n          serverResponse: action.response\r\n\r\n      };\r\n    case \"POST_MESSAGE_FAILURE\":\r\n      return {\r\n        ...messages,\r\n        requestStatus : {\r\n          isPending: false,\r\n          isSuccess: false,\r\n          isFailure: true,\r\n          error: action.error,\r\n        },\r\n        serverResponse: {}\r\n      }\r\n    case \"DELETE_ALL_PENDING\":\r\n      return {\r\n        ...messages,\r\n        requestStatus:{\r\n        isPending: true,\r\n        isSuccess: false,\r\n        isFailure: false,\r\n        error: null,\r\n        },\r\n        serverResponse: {} //clear old response if any\r\n      }\r\n    case \"DELETE_ALL_SUCCESS\":\r\n      return {\r\n        ...messages,\r\n        requestStatus:{\r\n          isPending: false,\r\n          isSuccess: true,\r\n          isFailure: false,\r\n          error: null,\r\n        },\r\n        messages: [], //empties the messages since they were already successfully updated in db as well.\r\n        serverResponse: {}\r\n      }\r\n      \r\n    case \"DELETE_ALL_FAILURE\":\r\n      return {\r\n        ...messages,\r\n        requestStatus : {\r\n          isPending: false,\r\n          isSuccess: false,\r\n          isFailure: true,\r\n          error: action.error,\r\n        },\r\n        serverResponse: {}\r\n      }\r\n      \r\n\r\n\r\n     default: return messages; //returns object of array of messages\r\n    }; \r\n};\r\n\r\n\r\n\r\nconst formReducer = ( f = initialForm, action) => {\r\n switch (action.type){\r\n    \r\n  case \"HANDLE_USER\":\r\n      //creating a copy wiht object.assign(), not mutating the original state; assigns v1 to be action's value\r\n      return Object.assign({},f, {\r\n        v1: action.value\r\n      });  //THIS NEEDS TO KEEP TRACK OF INPUT\r\n    \r\n    \r\n  case \"HANDLE_MSG\":\r\n     return Object.assign({},f, {\r\n        v2: action.value\r\n      }); \r\n    \r\n    default: return f; \r\n }\r\n \r\n};\r\n\r\n const detailsReducer = (id= null, action) => {\r\n  switch (action.type){\r\n    //grab the index of the active message to display modal for\r\n    case \"GET_ACTIVE_MSG\":\r\n      \r\n      return id = action.id;\r\n\r\n    default: return id;\r\n  }\r\n}; \r\n\r\n\r\n \r\nexport default combineReducers({\r\n  //Todo: messageList not connected to rest action, state, etc\r\n  messages: messageReducer,\r\n  f: formReducer,\r\n  id: detailsReducer\r\n\r\n \r\n//anotherKey: anotherReducer //all your reducers should be combined\r\n}\r\n);\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport { Provider } from 'react-redux';\r\nimport  { createStore, applyMiddleware } from 'redux';\r\nimport reducers from './reducers'; //we exported combineReducers\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\n//use applyMiddleware to add thunk middleware to the store\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n  <App />\r\n  </Provider>, \r\n  document.getElementById('root')\r\n  );\r\n  \r\n  //links view(React) to Redux side\r\n\r\n"],"sourceRoot":""}